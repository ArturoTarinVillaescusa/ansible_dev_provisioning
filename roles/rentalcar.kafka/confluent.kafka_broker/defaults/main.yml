kafka_broker_jaas_file: /etc/kafka/kafka_server_jaas.conf
kafka_broker_jaas_java_arg: "-Djava.security.auth.login.config={{kafka_broker_jaas_file}}"
kafka_broker_jolokia_java_arg: "-javaagent:{{jolokia_jar_path}}=port={{kafka_broker_jolokia_port}},host=0.0.0.0"
kafka_broker_open_file_limit: "{{open_file_limit}}"
kafka_broker_service_overrides:
  LimitNOFILE: "{{kafka_broker_open_file_limit}}"
kafka_broker_service_environment_overrides:
  KAFKA_HEAP_OPTS: "-Xmx1g"
  KAFKA_OPTS: "{{ kafka_broker_jolokia_java_arg + ' ' + kafka_broker_jaas_java_arg if security_mode in ['kerberos', 'kerberos_ssl', 'kerberos_ssl_customcerts'] else kafka_broker_jolokia_java_arg }}"
  LOG_DIR:    "/var/log/kafka"

kafka_broker_sysctl:
  vm.swappiness: 1
  vm.dirty_background_ratio: 5
  vm.dirty_ratio: 60

kafka_broker_packages:
  - confluent-kafka-2.12
  - confluent-rebalancer

kafka_broker:
  user: cp-kafka
  group: confluent
  config_file: /etc/kafka/server.properties
  systemd_file: /usr/lib/systemd/system/confluent-kafka.service
  systemd_override: /etc/systemd/system/confluent-kafka.service.d
  service_name: confluent-kafka
  datadir:
    - /opt/kafka/kafka/data
  systemd:
    enabled: yes
    state: started
  properties:

    delete.topic.enable: true
    auto.create.topics.enable: false


    group.initial.rebalance.delay.ms: 0
    log.retention.check.interval.ms: 300000
    log.retention.hours: 168
    log.segment.bytes: 1073741824

    # The number of threads that the server uses for processing requests, which may include disk I/O
    num.io.threads: 16
    # The number of threads that the server uses for receiving requests from the network and sending responses to the network
    num.network.threads: 8

    # The default number of log partitions per topic. More partitions allow greater
    # parallelism for consumption, but this will also result in more files across
    # the brokers.
    num.partitions: 2

    # The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
    # This value is recommended to be increased for installations with data dirs located in RAID array.
    num.recovery.threads.per.data.dir: 2

    # The receive buffer (SO_RCVBUF) used by the socket server
    socket.receive.buffer.bytes: 102400

    # The maximum size of a request that the socket server will accept (protection against OOM)
    socket.request.max.bytes: 104857600

    # The send buffer (SO_SNDBUF) used by the socket server
    socket.send.buffer.bytes: 102400

    ############################# Internal Topic Settings  #############################
    # The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
    # For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
    offsets.topic.replication.factor: 3
    transaction.state.log.replication.factor: 3
    transaction.state.log.min.isr: 2

    ############################# Log Flush Policy #############################

    # Messages are immediately written to the filesystem but by default we only fsync() to sync
    # the OS cache lazily. The following configurations control the flush of data to disk.
    # There are a few important trade-offs here:
    #    1. Durability: Unflushed data may be lost if you are not using replication.
    #    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
    #    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
    # The settings below allow one to configure the flush policy to flush data after a period of time or
    # every N messages (or both). This can be done globally and overridden on a per-topic basis.

    # The number of messages to accept before forcing a flush of data to disk
    log.flush.interval.messages: 10000

    # The maximum amount of time a message can sit in a log before we force a flush
    log.flush.interval.ms: 1000

    ############################# Log Retention Policy #############################

    # The following configurations control the disposal of log segments. The policy can
    # be set to delete segments after a period of time, or after a given size has accumulated.
    # A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
    # from the end of the log.

    # The minimum age of a log file to be eligible for deletion due to age
    log.retention.hours: 168

    # A size-based retention policy for logs. Segments are pruned from the log unless the remaining
    # segments drop below log.retention.bytes. Functions independently of log.retention.hours.
    log.retention.bytes: 1073741824

    # The maximum size of a log segment file. When this size is reached a new log segment will be created.
    # log.segment.bytes=1073741824
    log.segment.bytes: 536870912

    # The interval at which log segments are checked to see if they can be deleted according
    # to the retention policies
    log.retention.check.interval.ms: 300000

    # Enable the log cleaner process to run on the server. Should be enabled if using any topics
    # with a cleanup.policy=compact including the internal offsets topic. If disabled those topics
    # will not be compacted and continually grow in size.
    log.cleaner.enable: true


    ############################# Zookeeper #############################

    # Zookeeper connection string (see zookeeper docs for details).
    # This is a comma separated host:port pairs, each corresponding to a zk
    # server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
    # You can also append an optional chroot string to the urls to specify the
    # root directory for all kafka znodes.
    zookeeper.connect: "zookeeper.connect=broker1.rentalcar.es:2181,broker2.rentalcar.es:2181,broker3.rentalcar.es:2181"


    # Timeout in ms for connecting to zookeeper
    zookeeper.connection.timeout.ms: 6000

    # metric.reporters: io.confluent.metrics.reporter.ConfluentMetricsReporter
    # confluent.metrics.reporter.bootstrap.servers: "{{inventory_hostname}}:{{kafka_port}}"
    # confluent.metrics.reporter.topic.replicas: 3
    # ssl.endpoint.identification.algorithm: ""
    # confluent.metrics.reporter.ssl.endpoint.identification.algorithm: ""

