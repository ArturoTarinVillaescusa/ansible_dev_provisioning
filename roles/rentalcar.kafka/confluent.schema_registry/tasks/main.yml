# Install Packages
- name: Install the Schema Registry Packages
  yum:
    name: "{{item}}-{{confluent.package_version}}"
    state: latest
  loop: "{{schema_registry_packages}}"
  when: ansible_os_family == "RedHat"

- name: Install the Schema Registry Packages
  apt:
    name: "{{item}}={{confluent.package_version}}"
    update_cache: yes
  loop: "{{schema_registry_packages}}"
  when: ansible_os_family == "Debian"

# Configure environment
- name: schema-registry create group
  group:
    name: "{{schema_registry.group}}"
- name: schema-registry create user
  user:
    name: "{{schema_registry.user}}"
    comment: "Schema Registry User"
    system: yes
    group: "{{schema_registry.group}}"
- name: Change keytabs ownership
  file:
    path: "{{kerberos.keytab_dir}}"
    group: "{{schema_registry.group}}"
    mode: '777'
    recurse: yes
- name: schema-registry create config
  template:
    src: schema-registry.properties.j2
    dest: "{{schema_registry.config_file}}"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  when: security_mode == "plaintext"
  notify:
    - restart schema-registry
- name: schema-registry create config
  template:
    src: schema-registry_ssl.properties.j2
    dest: "{{schema_registry.config_file}}"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  when: security_mode == "ssl"
  notify:
    - restart schema-registry
- name: schema-registry create config
  template:
    src: schema-registry_sasl_ssl.properties.j2
    dest: "{{schema_registry.config_file}}"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  when: security_mode == "sasl_ssl"
  notify:
    - restart schema-registry
- name: schema-registry create config
  template:
    src: schema-registry_ssl_customcerts.properties.j2
    dest: "{{schema_registry.config_file}}"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  when: security_mode == "ssl_customcerts"
  notify:
    - restart schema-registry
- name: schema-registry create config
  template:
    src: schema-registry_kerberos.properties.j2
    dest: "{{schema_registry.config_file}}"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  when: security_mode == "kerberos"
  notify:
    - restart schema-registry
- name: schema-registry create config
  template:
    src: schema-registry_kerberos_ssl.properties.j2
    dest: "{{schema_registry.config_file}}"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  when: security_mode == "kerberos_ssl"
  notify:
    - restart schema-registry
- name: schema-registry create config
  template:
    src: schema-registry_kerberos_ssl_customcerts.properties.j2
    dest: "{{schema_registry.config_file}}"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  when: security_mode == "kerberos_ssl_customcerts"
  notify:
    - restart schema-registry

- name: Create Service Override Directory
  file:
    path: "{{schema_registry.systemd_override}}"
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
    state: directory
    mode: 0640

- name: Write Service Overrides
  template:
    src: override.conf.j2
    dest: "{{schema_registry.systemd_override}}/override.conf"
    mode: 0640
    owner: "{{schema_registry.user}}"
    group: "{{schema_registry.group}}"
  notify:
    - reload systemd
    - restart schema-registry

- meta: flush_handlers

- name: Start Schema Registry Service
  systemd:
    name: "{{schema_registry.service_name}}"
    enabled: "{{schema_registry.systemd.enabled}}"
    state: "{{schema_registry.systemd.state}}"
